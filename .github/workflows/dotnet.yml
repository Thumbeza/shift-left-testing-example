# This workflow will build, test and deploy we sell bread API project

name: build_test_and_deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    # Chechout the repository
    - uses: actions/checkout@v3

    #Install Dotnet 6 SDK
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

    # Restore dependencies 
    - name: Restore dependencies
      run: dotnet restore
    
    # Build all projects without the restore
    - name: Build
      run: dotnet build --no-restore
    
    # Run API unit tests and collect code coverage
    - name: Run API Unit Tests
      run: dotnet test We.Sell.Bread.API.Unit.Tests/We.Sell.Bread.API.Unit.Tests.csproj --collect:"XPlat Code Coverage" --no-build --verbosity normal

    # Run Infrastructure unit tests and collect code coverage
    - name: Run Infrastructure Unit Tests
      run: dotnet test We.Sell.Bread.Infrastructure.Tests/We.Sell.Bread.Infrastructure.Tests.csproj --collect:"XPlat Code Coverage" --no-build --verbosity normal

    # Run API Integration tests and collect code coverage
    - name: Run Integration Tests
      run: dotnet test We.Sell.Bread.API.Integration.Tests/We.Sell.Bread.API.Integration.Tests.csproj --collect:"XPlat Code Coverage" --no-build --verbosity normal
    
    # Get the test code coverage using Coverlet Collector
    # - name: Code Coverage Report
    #   uses: irongut/CodeCoverageSummary@v1.3.0
    #   with:
    #     filename: /**/coverage.cobertura.xml
    #     badge: true
    #     fail_below_min: true
    #     format: markdown
    #     hide_branch_rate: false
    #     hide_complexity: true
    #     indicators: true
    #     output: both
    #     thresholds: '60 80'
    
    # # Add a comment to the pr if code coverage is below the accepted threshold 
    # - name: Add Coverage PR Comment
    #   uses: marocchino/sticky-pull-request-comment@v2
    #   if: github.event_name == 'pull_request'
    #   with:
    #     recreate: true
    #     path: code-coverage-results.md
    
    # Publish and upload API artifacts
    - name: Publish API Artifacts
      run: dotnet publish We.Sell.Bread.API/We.Sell.Bread.API.csproj -c Release -o bread-api
      
    - name: Upload API Artifacts
      uses: actions/upload-artifact@v3.1.3
      with:
        name: api
        path: /home/runner/work/shift-left-testing-example/shift-left-testing-example/bread-api
        if-no-files-found: error

    # Publish and upload performance tests

    # Publish and upload security tests

  deploy_to_test:
    needs: build
    runs-on: ubuntu-latest

    steps:
    # Download API artefacts
    - name: Download API Artifacts
      uses: actions/download-artifact@v2.1.1
      with:
        name: api
        path: /home/runner/work/shift-left-testing-example/shift-left-testing-example/bread-api

    # Deploy to Azure Web apps
    # - name: Publishing bread-api to Azure app service
      # uses: azure/webapps-deploy@v2
      # with: 
      #   app-name: ${{ env.AZURE_WEBAPP_NAME }}
      #   publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE  }}
      #   package: /home/runner/work/shift-left-testing-example/shift-left-testing-example/bread-api

  security_checks:
    needs: deploy_to_test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

  performance_tests:
    needs: deploy_to_test
    runs-on: ubuntu-latest
      
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x

  